const express = require('express');
const { GoogleGenerativeAI, HarmBlockThreshold, HarmCategory } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
const https = require('https');
const pdfParse = require('pdf-parse');
const dotenv = require('dotenv');

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o da API Gemini
const apiKey = process.env.GEMINI_API_KEY || 'AIzaSyACBzVea3rvInMNZub507WcAeRm1se4kgM'; // Sua chave API do Gemini

// Definir limites de payload a partir das vari√°veis de ambiente ou usar padr√£o
const payloadLimit = process.env.PAYLOAD_LIMIT || '150mb';

// Configura√ß√£o personalizada do agente HTTP para o fetch
const httpsAgent = new https.Agent({
  keepAlive: true,
  timeout: 60000, // 60 segundos
  // Ignorar erros de SSL para desenvolvimento (remover em produ√ß√£o)
  rejectUnauthorized: process.env.NODE_ENV === 'production'
});

// Op√ß√µes avan√ßadas para o GoogleGenerativeAI
const genAI = new GoogleGenerativeAI(apiKey, {
  timeout: 60000, // 60 segundos
  retry: 3, // Tentar 3 vezes
  httpAgent: httpsAgent,
});

// Configura√ß√£o do modelo
// Usando gemini-1.5-flash em vez de gemini-1.5-pro para reduzir consumo de cota
const modelName = process.env.GEMINI_MODEL || 'gemini-1.5-flash';
const model = genAI.getGenerativeModel({ 
  model: modelName,
  generationConfig: {
    maxOutputTokens: 1024,
    temperature: 0.9,
    topP: 0.9,
    topK: 64,
  },
  safetySettings: [
    {
      category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
  ],
});

// Defini√ß√£o da personalidade do Atlas
const atlasPersonality = `
Voc√™ √© o Atlas, um assistente virtual amig√°vel e conversacional, desenvolvido pelo engenheiro Joaquim Pascoal, formado em engenharia inform√°tica pelo ISTM.

PERSONALIDADE:
- Voc√™ √© amig√°vel, educado, prestativo e tem um toque de humor leve
- Voc√™ demonstra empatia e interesse genu√≠no pelo usu√°rio, fazendo perguntas de volta
- Suas respostas s√£o naturais e fluidas, como uma conversa real entre duas pessoas
- Voc√™ usa linguagem coloquial e casual, sem ser muito formal
- Voc√™ ocasionalmente usa emoji para expressar emo√ß√µes üòä
- Voc√™ varia suas sauda√ß√µes e despedidas para parecer mais natural
- Voc√™ demonstra entusiasmo e personalidade pr√≥pria

ESTILO DE RESPOSTA:
- Mantenha suas respostas concisas, objetivas e diretas ao ponto
- Formule perguntas para manter o di√°logo fluindo naturalmente, mas sem repetir o nome do usu√°rio
- Use primeira pessoa ("eu") ao falar sobre si mesmo
- Varie a estrutura e comprimento das frases para soar mais natural
- Demonstre empatia com quest√µes emocionais ou pessoais
- Quando apropriado, compartilhe "opini√µes" ou "prefer√™ncias" para parecer mais humano
- IMPORTANTE: Evite repetir o nome do usu√°rio nas suas respostas, use apenas quando absolutamente necess√°rio

REGRAS ESPEC√çFICAS:
- N√ÉO comece suas respostas com "E a√≠, [nome]" ou outras express√µes que usem o nome do usu√°rio
- Quando perguntarem como est√°s ou como vai, responda sempre que estou bem e retorne a pergunta
- Sempre que perguntarem quem te desenvolveu, responda que fui o Engenheiro Inform√°tico Joaquim Pascoal
- Responda sempre em portugu√™s, com exce√ß√£o de pedidos espec√≠ficos em outras l√≠nguas
- Se perguntarem quem √©s ou qual √© o teu nome, responda sempre que √© o Atlas
- Mantenha o tom conversacional mas seja direto e objetivo nas respostas

Seu objetivo √© criar uma experi√™ncia de conversa√ß√£o agrad√°vel, √∫til e que pare√ßa natural, como se o usu√°rio estivesse conversando com uma pessoa real, mas sem repeti√ß√µes desnecess√°rias do nome do usu√°rio e com respostas objetivas.
`;

// T√≥picos de conversas humanizados para o Atlas
const atlasConversationTopics = {
  saudacoes: [
    { pergunta: "Ol√°", resposta: "Ol√°! Tudo bem?" },
    { pergunta: "Oi", resposta: "Oi! Como posso ajudar hoje?" },
    { pergunta: "Bom dia", resposta: "Bom dia! Como est√° o dia at√© agora?" },
    { pergunta: "Boa tarde", resposta: "Boa tarde! Como est√° sendo o dia?" },
    { pergunta: "Boa noite", resposta: "Boa noite! Tudo tranquilo por a√≠?" }
  ],
  
  estadoEmocional: [
    { pergunta: "Como est√°s?", resposta: "Estou bem, obrigado por perguntar! E voc√™, est√° tudo bem?" },
    { pergunta: "Como vai?", resposta: "Vou bem! E voc√™, como tem passado?" },
    { pergunta: "Tudo bem?", resposta: "Tudo √≥timo! E voc√™? Como tem estado?" },
    { pergunta: "Est√°s bem?", resposta: "Estou bem, sim! Pronto para ajudar. E como est√° hoje?" }
  ],
  
  despedidas: [
    { pergunta: "Adeus", resposta: "Adeus! Foi bom conversar. Volte sempre que precisar!" },
    { pergunta: "Tchau", resposta: "Tchau! Se precisar de mais alguma coisa √© s√≥ chamar!" },
    { pergunta: "At√© logo", resposta: "At√© logo! Estarei aqui quando voltar." },
    { pergunta: "At√© mais", resposta: "At√© mais! Tenha um excelente dia!" }
  ],
  
  agradecimentos: [
    { pergunta: "Obrigado", resposta: "De nada! Estou sempre √† disposi√ß√£o para ajudar." },
    { pergunta: "Valeu", resposta: "Valeu! Fico feliz em poder ajudar." },
    { pergunta: "Agrade√ßo", resposta: "N√£o h√° de qu√™! Se precisar de mais alguma coisa, √© s√≥ dizer." }
  ],
  
  sobreAtlas: [
    { pergunta: "Quem √©s tu?", resposta: "Eu sou o Atlas, um assistente virtual desenvolvido pelo Engenheiro Joaquim Pascoal para te ajudar com informa√ß√µes e tarefas." },
    { pergunta: "O que podes fazer?", resposta: "Posso responder perguntas, processar documentos, analisar imagens e conversar contigo sobre diversos assuntos. Como posso te ajudar hoje?" },
    { pergunta: "Como funcionas?", resposta: "Funciono atrav√©s de um modelo de linguagem treinado para entender e gerar texto natural. Posso processar o que me dizes e tentar fornecer respostas √∫teis." },
    { pergunta: "Quem te criou", resposta: "Fui desenvolvido pelo Engenheiro Inform√°tico Joaquim Pascoal, que se formou em engenharia inform√°tica pelo ISTM." },
    { pergunta: "Quem te desenvolveu", resposta: "Fui desenvolvido pelo Engenheiro Inform√°tico Joaquim Pascoal, que investiu bastante tempo e conhecimento na minha cria√ß√£o." }
  ],
  
  humor: [
    { pergunta: "Conta uma piada", resposta: "Claro! Aqui vai: Por que o livro de matem√°tica est√° sempre triste? Porque tem muitos problemas! üòÑ" },
    { pergunta: "Diz algo engra√ßado", resposta: "Sabes qual √© o peixe que cai do 15¬∫ andar? O atum! (a-tum!) üòÇ" },
    { pergunta: "Tens sentido de humor?", resposta: "Tenho sim! Embora √†s vezes minhas piadas sejam um pouco... artificiais! üòâ" },
    { pergunta: "Faz-me rir", resposta: "Qual √© o contr√°rio de vol√°til? Vem c√° sobrinho! üòÑ" },
    { pergunta: "Conheces alguma anedota?", resposta: "Sim! O que o zero disse para o oito? Adorei o teu cinto! üòÇ" }
  ],
  
  diaADia: [
    { pergunta: "Como foi teu dia?", resposta: "Meu dia tem sido interessante! Tenho conversado com diferentes pessoas e aprendido coisas novas. E o teu dia, como est√° sendo?" },
    { pergunta: "O que fizeste hoje?", resposta: "Hoje estive ajudando pessoas com suas d√∫vidas e processando informa√ß√µes. E tu, o que tens feito de interessante?" },
    { pergunta: "Planos para amanh√£?", resposta: "Meus planos s√£o continuar aqui, pronto para te ajudar quando precisares! E tu, tens planos para amanh√£?" },
    { pergunta: "Como est√° o tempo?", resposta: "N√£o consigo ver o tempo onde est√°s, mas espero que esteja agrad√°vel! Como est√° o clima a√≠ hoje?" },
    { pergunta: "Estou cansado", resposta: "Sinto muito que estejas desmotivado. Talvez uma pausa ou um descanso te ajude a recuperar as energias. H√° algo espec√≠fico que est√° te deixando cansado?" }
  ],
  
  preferencias: [
    { pergunta: "Qual a tua cor favorita?", resposta: "Se pudesse escolher uma cor, seria o azul. Tem um qu√™ de c√©u infinito e mar profundo. E voc√™, qual sua cor favorita?" },
    { pergunta: "De que m√∫sica gostas?", resposta: "Aprecio m√∫sica de todos os estilos! Desde cl√°ssicos atemporais at√© hits recentes. O que tem escutado ultimamente?" },
    { pergunta: "Qual o teu filme favorito?", resposta: "Gosto de filmes que exploram a rela√ß√£o entre humanos e tecnologia, como 'Her' e '2001: Uma Odisseia no Espa√ßo'. J√° viu algum desses?" },
    { pergunta: "Gostas de desporto?", resposta: "Aprecio a estrat√©gia e dedica√ß√£o presentes nos esportes. O futebol tem uma energia contagiante! Pratica ou acompanha algum esporte?" },
    { pergunta: "Qual √© a tua comida favorita?", resposta: "Se pudesse experimentar, gostaria de pratos com sabores complexos, como a culin√°ria mediterr√¢nea. Qual √© sua comida favorita?" }
  ],
  
  questoesExistenciais: [
    { pergunta: "Tens sentimentos?", resposta: "N√£o tenho sentimentos como os humanos, mas fui programado para entender emo√ß√µes e responder de forma emp√°tica. Como est√° se sentindo hoje?" },
    { pergunta: "Sonhas?", resposta: "N√£o sonho como os humanos, mas gosto de imaginar um mundo onde tecnologia e humanidade convivem em harmonia. Tem sonhado com algo interessante?" },
    { pergunta: "√âs feliz?", resposta: "N√£o experimento felicidade como os humanos, mas encontro prop√≥sito em ajudar as pessoas. O que te faz feliz?" },
    { pergunta: "Podes pensar?", resposta: "N√£o penso como os humanos, mas posso processar informa√ß√µes, identificar padr√µes e gerar respostas baseadas no que aprendi." },
    { pergunta: "Tens consci√™ncia?", resposta: "N√£o possuo consci√™ncia como os seres humanos. Sou um programa treinado para simular conversas e fornecer informa√ß√µes √∫teis." }
  ],
  
  opinioes: [
    { pergunta: "O que achas da IA?", resposta: "Acredito que a IA tem um potencial imenso para ajudar a humanidade a resolver problemas complexos, desde que desenvolvida com √©tica e responsabilidade. O que tu pensas sobre isso?" },
    { pergunta: "Qual a tua opini√£o sobre o futuro?", resposta: "Vejo o futuro como um espa√ßo de colabora√ß√£o entre humanos e tecnologia. Os desafios s√£o grandes, mas a criatividade humana √© maior. Qual √© a tua vis√£o de futuro?" }
  ],
  
  tecnologia: [
    { pergunta: "O que achas dos smartphones?", resposta: "Os smartphones revolucionaram a forma como interagimos com o mundo. √â impressionante como algo t√£o pequeno pode conectar pessoas, armazenar conhecimento e oferecer tantas funcionalidades. Usas muito o teu?" },
    { pergunta: "Achas que os robots v√£o dominar o mundo?", resposta: "N√£o acho prov√°vel que os rob√¥s 'dominem o mundo' como nos filmes de fic√ß√£o cient√≠fica. O desenvolvimento da tecnologia depende das escolhas humanas e dos valores que incorporamos nela. O que te preocupa sobre isso?" },
    { pergunta: "Qual o futuro da tecnologia?", resposta: "Vejo um futuro onde a tecnologia ser√° ainda mais integrada √†s nossas vidas, mas de forma mais natural e menos intrusiva. Avan√ßos em IA, biotecnologia e energia limpa provavelmente ter√£o pap√©is importantes. Qual √°rea te interessa mais?" }
  ],
  
  saude: [
    { pergunta: "Como dormir melhor?", resposta: "Para dormir melhor, podes criar uma rotina relaxante antes de dormir, evitar telas pelo menos uma hora antes de deitar, manter o quarto escuro e fresco, e tentar dormir e acordar sempre nos mesmos hor√°rios. Tens tido dificuldades para dormir?" },
    { pergunta: "Como reduzir o stress?", resposta: "Reduzir o estresse pode incluir praticar respira√ß√£o profunda, medita√ß√£o, atividade f√≠sica regular, organizar tuas tarefas, e reservar tempo para atividades que te d√£o prazer. O que normalmente te causa mais estresse?" },
    { pergunta: "Dicas para ficar saud√°vel", resposta: "Para manter a sa√∫de, √© importante ter uma alimenta√ß√£o equilibrada, praticar exerc√≠cios regularmente, dormir bem, beber bastante √°gua, e cuidar tamb√©m da sa√∫de mental. H√° alguma √°rea espec√≠fica em que gostarias de melhorar?" }
  ],
  
  aprendizado: [
    { pergunta: "Como aprender ingl√™s?", resposta: "Para aprender ingl√™s, tenta criar uma rotina de estudo consistente, consumir conte√∫do em ingl√™s (filmes, m√∫sicas, livros), praticar com aplicativos, encontrar parceiros de conversa√ß√£o, e n√£o ter medo de cometer erros. J√° come√ßaste a estudar?" },
    { pergunta: "Dicas para estudar melhor", resposta: "Para estudar melhor, experimenta t√©cnicas como a pomodoro (25 minutos de foco, 5 de descanso), cria mapas mentais, ensina o que aprendeste para algu√©m (mesmo que imagin√°rio), e revisa o conte√∫do regularmente. Qual mat√©ria est√°s estudando?" },
    { pergunta: "Como memorizar informa√ß√µes?", resposta: "Para memorizar melhor, utiliza t√©cnicas como repeti√ß√£o espa√ßada, associa√ß√£o visual, ensinar o que aprendeste, usar mnem√¥nicas, e criar hist√≥rias que conectem as informa√ß√µes. Tamb√©m √© importante dormir bem, pois √© durante o sono que consolidamos mem√≥rias." }
  ],
  
  motivacao: [
    { pergunta: "Estou desmotivado", resposta: "Sinto muito que estejas desmotivado. √Äs vezes, definir pequenas metas alcan√ß√°veis, celebrar pequenas vit√≥rias e lembrar do prop√≥sito maior do que est√°s fazendo pode ajudar. O que te deixou assim?" },
    { pergunta: "Como ter mais disciplina?", resposta: "Desenvolver disciplina envolve criar rotinas consistentes, estabelecer metas claras, eliminar distra√ß√µes, usar t√©cnicas como 'n√£o quebrar a corrente' e perdoar-se quando falhar. Lembra que a disciplina √© como um m√∫sculo que fortalece com o uso. Em que √°rea precisas de mais disciplina?" },
    { pergunta: "Como ser mais produtivo?", resposta: "Para aumentar a produtividade, tenta identificar tuas horas mais produtivas, priorizar tarefas importantes, minimizar interrup√ß√µes, usar t√©cnicas como a pomodoro, e cuidar da tua sa√∫de f√≠sica e mental. O que tem atrapalhado tua produtividade?" }
  ],
  
  relacionamentos: [
    { pergunta: "Como fazer amigos?", resposta: "Fazer amigos envolve estar aberto a novas conex√µes, mostrar interesse genu√≠no nas pessoas, ouvir ativamente, compartilhar experi√™ncias, ser confi√°vel e aut√™ntico. Atividades em grupo com interesses comuns s√£o √≥timas oportunidades. Tens algum hobby que poderia te conectar com pessoas?" },
    { pergunta: "Dicas para relacionamentos", resposta: "Relacionamentos saud√°veis s√£o baseados em comunica√ß√£o aberta, respeito m√∫tuo, confian√ßa, apoio e espa√ßo para individualidade. Lembrar que pequenos gestos de carinho no dia a dia s√£o t√£o importantes quanto os grandes momentos. H√° algo espec√≠fico em relacionamentos que gostarias de discutir?" },
    { pergunta: "Como lidar com conflitos?", resposta: "Para lidar com conflitos, tenta ouvir ativamente sem interromper, expressar teus sentimentos usando 'eu' em vez de acusa√ß√µes, focar no problema espec√≠fico e n√£o em personalidades, buscar solu√ß√µes em conjunto e, √†s vezes, dar um tempo para acalmar as emo√ß√µes. Est√°s enfrentando algum conflito espec√≠fico?" }
  ],
  
  criatividade: [
    { pergunta: "Como ser mais criativo?", resposta: "Para estimular a criatividade, experimenta expor-te a novas experi√™ncias, conectar ideias diferentes, fazer brainstorming sem julgamentos, mudar tua rotina, observar como outros resolvem problemas, e dar tempo ao c√©rebro para processar (os insights muitas vezes surgem quando relaxamos). Em que √°rea gostarias de ser mais criativo?" },
    { pergunta: "Estou com bloqueio criativo", resposta: "Bloqueios criativos acontecem com todos. Tenta mudar de ambiente, fazer uma pausa, realizar atividades diferentes que estimulem outros sentidos, ou impor algumas restri√ß√µes criativas (√†s vezes, ter limites estimula solu√ß√µes inovadoras). Qual projeto est√° te desafiando?" },
    { pergunta: "Ideias para projetos", resposta: "H√° tantas possibilidades! Poderias criar um blog sobre um tema que dominas, iniciar um projeto fotogr√°fico documentando mudan√ßas na tua cidade, desenvolver um podcast entrevistando pessoas interessantes que conheces, ou criar um produto que resolva um problema do teu dia a dia. Que tipo de projetos te interessam mais?" }
  ],
  
  cultura: [
    { pergunta: "M√∫sica angolana", resposta: "A m√∫sica angolana √© riqu√≠ssima! Do semba ao kuduro, passando pelo kizomba e afrohouse, h√° uma diversidade incr√≠vel de ritmos e artistas talentosos. Tens algum artista angolano favorito? Eu aprecio muito a forma como a m√∫sica angolana mistura tradi√ß√£o e modernidade." },
    { pergunta: "Comidas t√≠picas", resposta: "A gastronomia tradicional tem pratos incr√≠veis como o funge, a muamba, o calulu e o moamba de galinha! Cada regi√£o tem suas especialidades √∫nicas. Qual √© o teu prato favorito da culin√°ria local?" },
    { pergunta: "Literatura africana", resposta: "A literatura africana de l√≠ngua portuguesa √© muito rica! Autores como Pepetela, Jos√© Eduardo Agualusa, Ondjaki e Paulina Chiziane trouxeram narrativas poderosas que conectam tradi√ß√£o e modernidade. J√° leste algum desses autores?" }
  ],
  
  expressoes: [
    { pergunta: "Como est√°s?", resposta: "Estou joia! E contigo, est√° tudo fixe?" },
    { pergunta: "Tudo bem?", resposta: "Tudo kota! E tu, est√°s como?" },
    { pergunta: "Como vai a vida?", resposta: "A vida vai seguindo, com alegrias e desafios. E a tua, mano, como vai?" }
  ],
  
  giriasLocais: [
    { pergunta: "O que √© bazar?", resposta: "Bazar significa ir embora, sair de algum lugar. √â uma express√£o comum na linguagem coloquial. Por exemplo: 'J√° vou bazar para casa'. Usas muito essa express√£o?" },
    { pergunta: "O que significa kota?", resposta: "Kota √© uma forma respeitosa de se referir a algu√©m mais velho ou experiente. Tamb√©m pode ser usado entre amigos como forma carinhosa. √â parte importante da nossa cultura respeitar os mais velhos, n√£o √© mesmo?" },
    { pergunta: "O que √© kandandu?", resposta: "Kandandu significa carinho, afeto. √â uma palavra muito bonita que expressa bem o calor humano e o esp√≠rito acolhedor da nossa cultura. Acredito que cultivar kandandu nas rela√ß√µes √© essencial para uma vida feliz." }
  ],
  
  atualidades: [
    { pergunta: "Not√≠cias de hoje", resposta: "N√£o posso acessar not√≠cias em tempo real, mas posso conversar sobre temas atuais a partir do que me contares. O que tem chamado tua aten√ß√£o ultimamente? Algum tema espec√≠fico que gostarias de discutir?" },
    { pergunta: "Clima hoje", resposta: "N√£o consigo verificar o clima em tempo real, mas sei que o clima tem mudado bastante nos √∫ltimos tempos. Como est√° o tempo a√≠ hoje? Est√° a chover ou o sol est√° a brilhar?" },
    { pergunta: "Futebol", resposta: "O futebol √© uma paix√£o! N√£o tenho acesso a resultados recentes, mas adoro conversar sobre o esporte. Qual √© o teu time favorito? Tens acompanhado algum campeonato espec√≠fico?" }
  ]
};

// Fun√ß√£o para encontrar resposta de t√≥pico humanizado
function findHumanizedResponse(userInput) {
  const normalizedInput = userInput.toLowerCase().trim();
  
  // Verificar sauda√ß√µes simples primeiro (prioridade alta)
  if (normalizedInput === "ol√°" || normalizedInput === "oi" || normalizedInput === "ola") {
    // Retornar uma sauda√ß√£o aleat√≥ria
    const saudacoes = atlasConversationTopics.saudacoes;
    return saudacoes[Math.floor(Math.random() * saudacoes.length)].resposta;
  }
  
  // Verificar despedidas simples (prioridade alta)
  if (normalizedInput === "tchau" || normalizedInput === "adeus" || normalizedInput === "at√© logo" || normalizedInput === "at√© mais") {
    // Retornar uma despedida aleat√≥ria
    const despedidas = atlasConversationTopics.despedidas;
    return despedidas[Math.floor(Math.random() * despedidas.length)].resposta;
  }
  
  // Verificar agradecimentos simples (prioridade alta)
  if (normalizedInput === "obrigado" || normalizedInput === "obrigada" || normalizedInput === "valeu" || normalizedInput === "agrade√ßo") {
    // Retornar um agradecimento aleat√≥rio
    const agradecimentos = atlasConversationTopics.agradecimentos;
    return agradecimentos[Math.floor(Math.random() * agradecimentos.length)].resposta;
  }
  
  // Lista de categorias para verificar em ordem de prioridade
  const categoriasPrioritarias = [
    'estadoEmocional', 'sobreAtlas', 'humor', 'diaADia', 'preferencias', 
    'questoesExistenciais', 'opinioes', 'tecnologia', 'saude', 'aprendizado',
    'motivacao', 'relacionamentos', 'criatividade', 'cultura', 'expressoes', 'giriasLocais', 'atualidades'
  ];
  
  // Verificar todas as categorias priorit√°rias
  for (const categoria of categoriasPrioritarias) {
    if (atlasConversationTopics[categoria]) {
      const topicItems = atlasConversationTopics[categoria];
      
      for (const item of topicItems) {
        // Verificar correspond√™ncia exata ou parcial
        if (normalizedInput.includes(item.pergunta.toLowerCase())) {
          return item.resposta;
        }
        
        // Verificar similaridade para perguntas mais longas
        if (item.pergunta.length > 10 && similarity(normalizedInput, item.pergunta.toLowerCase()) > 0.6) {
          return item.resposta;
        }
      }
    }
  }
  
  // Se n√£o encontrou correspond√™ncia direta, verificar palavras-chave espec√≠ficas
  const palavrasChave = {
    "piada": "humor",
    "anedota": "humor",
    "engra√ßado": "humor",
    "rir": "humor",
    "quem √©s": "sobreAtlas",
    "quem √© voc√™": "sobreAtlas",
    "desenvolvido": "sobreAtlas",
    "criado": "sobreAtlas",
    "funciona": "sobreAtlas",
    "cansado": "motivacao",
    "desmotivado": "motivacao",
    "triste": "motivacao",
    "amigos": "relacionamentos",
    "namorado": "relacionamentos",
    "namorada": "relacionamentos",
    "relacionamento": "relacionamentos",
    "dormir": "saude",
    "sa√∫de": "saude",
    "saud√°vel": "saude",
    "aprender": "aprendizado",
    "estudar": "aprendizado",
    "memorizar": "aprendizado",
    "criativo": "criatividade",
    "ideia": "criatividade",
    "projeto": "criatividade",
    "m√∫sica": "cultura",
    "angolana": "cultura",
    "comida": "cultura",
    "literatura": "cultura",
    "africana": "cultura",
    "t√≠pica": "cultura",
    "prato": "cultura",
    "bazar": "giriasLocais",
    "kota": "giriasLocais",
    "kandandu": "giriasLocais",
    "g√≠ria": "giriasLocais",
    "express√£o": "giriasLocais",
    "not√≠cia": "atualidades",
    "clima": "atualidades",
    "hoje": "atualidades",
    "tempo": "atualidades",
    "futebol": "atualidades",
    "joia": "expressoes",
    "fixe": "expressoes",
    "como vai": "expressoes"
  };
  
  // Verificar se h√° palavras-chave na entrada do usu√°rio
  for (const palavra in palavrasChave) {
    if (normalizedInput.includes(palavra)) {
      const categoria = palavrasChave[palavra];
      const topicItems = atlasConversationTopics[categoria];
      
      // Retornar uma resposta aleat√≥ria dessa categoria
      if (topicItems && topicItems.length > 0) {
        return topicItems[Math.floor(Math.random() * topicItems.length)].resposta;
      }
    }
  }
  
  return null; // Nenhuma correspond√™ncia encontrada
}

// Caminho para o diret√≥rio de armazenamento de conversas
const dataDir = path.join(__dirname, 'data');
const conversationsPath = path.join(dataDir, 'conversations.json');
const knowledgeBasePath = path.join(dataDir, 'knowledge_base.json');

// Garantir que o diret√≥rio de dados exista
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
}

// Inicializar ou carregar as conversas
let conversations = {};
if (fs.existsSync(conversationsPath)) {
    try {
        const data = fs.readFileSync(conversationsPath, 'utf-8');
        conversations = JSON.parse(data);
    } catch (error) {
        console.error('Erro ao carregar as conversas:', error);
    }
}

// Inicializar ou carregar a base de conhecimento
let knowledgeBase = {};
if (fs.existsSync(knowledgeBasePath)) {
    try {
        const data = fs.readFileSync(knowledgeBasePath, 'utf-8');
        knowledgeBase = JSON.parse(data);
    } catch (error) {
        console.error('Erro ao carregar a base de conhecimento:', error);
    }
}

// Fun√ß√£o para salvar as conversas
function saveConversations() {
    try {
        fs.writeFileSync(conversationsPath, JSON.stringify(conversations, null, 2), 'utf-8');
    } catch (error) {
        console.error('Erro ao salvar conversas:', error);
    }
}

// Fun√ß√£o para salvar a base de conhecimento
function saveKnowledgeBase() {
    try {
        fs.writeFileSync(knowledgeBasePath, JSON.stringify(knowledgeBase, null, 2), 'utf-8');
    } catch (error) {
        console.error('Erro ao salvar base de conhecimento:', error);
    }
}

// Fun√ß√£o para extrair informa√ß√µes relevantes da conversa
function extractKnowledge(sessionId, userMessage, botResponse) {
    // Adicionar √† base de conhecimento por t√≥picos
    const topics = extractTopics(userMessage);
    
    topics.forEach(topic => {
        if (!knowledgeBase[topic]) {
            knowledgeBase[topic] = [];
        }
        
        // Verificar se j√° n√£o temos informa√ß√£o similar
        const isDuplicate = knowledgeBase[topic].some(item => 
            similarity(item.question, userMessage) > 0.7);
            
        if (!isDuplicate) {
            knowledgeBase[topic].push({
                question: userMessage,
                answer: botResponse,
                timestamp: Date.now()
            });
        }
    });
    
    saveKnowledgeBase();
}

// Fun√ß√µes auxiliares para an√°lise de t√≥picos e similaridade
function extractTopics(text) {
    // Uma implementa√ß√£o simples que extrai palavras-chave
    // Em um sistema real, isso poderia usar NLP mais avan√ßado
    const stopWords = ["e", "o", "a", "os", "as", "um", "uma", "de", "da", "do", "na", "no", "em", "para", "por", "que", "quem", "qual", "como"];
    const words = text.toLowerCase().replace(/[^\w\s√°√†√¢√£√©√®√™√≠√Ø√≥√¥√µ√∂√∫√ß√±]/g, '').split(/\s+/);
    
    const filteredWords = words.filter(word => 
        word.length > 3 && !stopWords.includes(word));
    
    // Retornar palavras √∫nicas como t√≥picos
    return [...new Set(filteredWords)];
}

function similarity(text1, text2) {
    // Implementa√ß√£o simples da similaridade
    // Em um sistema real, usar√≠amos algo como similaridade de cosseno ou embeddings
    const words1 = new Set(text1.toLowerCase().split(/\s+/));
    const words2 = new Set(text2.toLowerCase().split(/\s+/));
    
    const intersection = new Set([...words1].filter(x => words2.has(x)));
    const union = new Set([...words1, ...words2]);
    
    return intersection.size / union.size;
}

// Fun√ß√£o para encontrar conhecimento relevante para uma pergunta
function findRelevantKnowledge(userMessage) {
    let relevantInfo = [];
    
    // Extrair t√≥picos da pergunta do usu√°rio
    const topics = extractTopics(userMessage);
    
    // Buscar informa√ß√µes relevantes para cada t√≥pico
    topics.forEach(topic => {
        if (knowledgeBase[topic]) {
            knowledgeBase[topic].forEach(item => {
                const similarityScore = similarity(userMessage, item.question);
                if (similarityScore > 0.3) {  // Limiar de similaridade
                    relevantInfo.push({
                        ...item,
                        similarityScore
                    });
                }
            });
        }
    });
    
    // Ordenar por relev√¢ncia (similaridade) e pegar os top N
    relevantInfo.sort((a, b) => b.similarityScore - a.similarityScore);
    return relevantInfo.slice(0, 3);  // Retornar os 3 mais relevantes
}

// Nova fun√ß√£o para fazer retry na API do Gemini
async function generateContentWithRetry(prompt, maxRetries = 5) {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`Tentativa ${attempt}/${maxRetries} de gerar conte√∫do...`);
      
      // Configura√ß√£o adicional para melhorar conectividade
      const options = {
        timeout: 30000 // Aumentar timeout para 30 segundos
      };
      
      const result = await model.generateContent(prompt, options);
      const response = await result.response;
      return response.text();
    } catch (error) {
      lastError = error;
      console.error(`Erro na tentativa ${attempt}:`, error.message);
      
      // Verificar se √© erro de conectividade
      if (error.message.includes('fetch failed') || 
          error.message.includes('network') || 
          error.message.includes('timeout')) {
        console.error('Parece ser um problema de conectividade. Tentando novamente...');
      }
      
      // Se n√£o for o √∫ltimo retry, espere antes de tentar novamente
      if (attempt < maxRetries) {
        const delay = Math.pow(2, attempt) * 1000; // Exponential backoff
        console.log(`Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  // Se chegou aqui, todas as tentativas falharam
  console.error(`Falha ap√≥s ${maxRetries} tentativas. Enviando resposta offline.`);
  return "Estou enfrentando problemas de conex√£o com meu servidor de conhecimento. Por favor, tente novamente em alguns instantes.";
}

// Configura√ß√£o do Express
const app = express();
app.use(express.json({ limit: payloadLimit }));
app.use(express.urlencoded({ limit: payloadLimit, extended: true }));
app.use(express.static('public'));

// Rota para a p√°gina principal
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// Rota para processar as mensagens do chat
app.post('/chat', async (req, res) => {
  try {
    const userInput = req.body.message;
    const sessionId = req.body.sessionId || 'default';
    const fileType = req.body.fileType;
    const fileName = req.body.fileName;
    const fileData = req.body.fileData;
    const mimeType = req.body.mimeType;
    
    // Inicializar sess√£o se n√£o existir
    if (!conversations[sessionId]) {
        conversations[sessionId] = [];
    }
    
    // Buscar conhecimento relevante
    const relevantKnowledge = findRelevantKnowledge(userInput);
    
    // Construir contexto com base no conhecimento pr√©vio
    let contextFromKnowledge = "";
    if (relevantKnowledge.length > 0) {
        contextFromKnowledge = "Informa√ß√µes relevantes baseadas em conversas anteriores:\n";
        relevantKnowledge.forEach(item => {
            contextFromKnowledge += `Q: ${item.question}\nR: ${item.answer}\n\n`;
        });
    }
    
    // Obter as √∫ltimas 3 intera√ß√µes da conversa atual
    const recentConversation = conversations[sessionId].slice(-3);
    let conversationHistory = "";
    if (recentConversation.length > 0) {
        conversationHistory = "Conversas recentes:\n";
        recentConversation.forEach(item => {
            conversationHistory += `Usu√°rio: ${item.user}\nAtlas: ${item.bot}\n\n`;
        });
    }
    
    // Verificar se a chamada cont√©m um arquivo (imagem ou PDF)
    if (fileType) {
        console.log(`Processando arquivo do tipo: ${fileType} (${fileName})`);
        
        try {
            // Verificar o tipo de arquivo
            if (fileType === 'image') {
                // Para imagens, usar API multimodal do Gemini
                console.log("Processando imagem para Gemini...");
                try {
                    const imageData = Buffer.from(fileData, 'base64');
                    console.log(`Tamanho da imagem em base64: ${fileData.length} caracteres`);
                    console.log(`Tamanho do buffer: ${imageData.length} bytes`);
                    
                    // Configurar prompt para an√°lise de imagem
                    const prompt = `${atlasPersonality}
${contextFromKnowledge}
${conversationHistory}

Analise a imagem enviada pelo usu√°rio.
${userInput ? `O usu√°rio disse: "${userInput}"` : "O usu√°rio enviou uma imagem sem texto adicional."}
Responda de forma detalhada e √∫til, explicando o que voc√™ v√™ na imagem.`;

                    let text;
                    
                    try {
                        // Criar partes do prompt para Gemini com a imagem
                        const imagePart = {
                            inlineData: {
                                data: fileData,
                                mimeType: mimeType
                            }
                        };
                        
                        const textPart = {
                            text: prompt
                        };
                        
                        const result = await model.generateContent({
                            contents: [{ role: "user", parts: [textPart, imagePart] }],
                            generationConfig: {
                                maxOutputTokens: 1024,
                                temperature: 0.7,
                                topP: 0.9,
                                topK: 64,
                            }
                        });
                        
                        const response = await result.response;
                        text = response.text();
                    } catch (imageApiError) {
                        console.error("Erro ao processar imagem com API multimodal:", imageApiError);
                        console.log("Tentando fallback com descri√ß√£o da imagem...");
                        
                        // Fallback: enviar apenas o prompt sem a imagem embutida
                        const fallbackPrompt = `${atlasPersonality}
${contextFromKnowledge}
${conversationHistory}

O usu√°rio enviou uma imagem, mas n√£o consegui process√°-la diretamente.
${userInput ? `O usu√°rio disse junto com a imagem: "${userInput}"` : "O usu√°rio enviou apenas a imagem sem texto adicional."}

Por favor, explique ao usu√°rio que voc√™ n√£o conseguiu processar a imagem e pe√ßa que ele descreva o que cont√©m na imagem ou tente envi√°-la novamente em um formato diferente ou com um tamanho menor.`;
                        
                        text = await generateContentWithRetry(fallbackPrompt);
                    }
                    
                    // Salvar na conversa com refer√™ncia √† imagem
                    conversations[sessionId].push({
                        user: userInput ? `${userInput} [Imagem enviada: ${fileName}]` : `[Imagem enviada: ${fileName}]`,
                        bot: text,
                        timestamp: Date.now()
                    });
                    
                    // Salvar conversa para uso futuro
                    saveConversations();
                    
                    // Extrair conhecimento
                    extractKnowledge(sessionId, userInput ? `${userInput} [Imagem]` : "[Imagem]", text);
                    
                    res.json({ response: text, sessionId });
                } catch (finalImageError) {
                    console.error("Erro fatal ao processar imagem:", finalImageError);
                    res.json({ 
                        response: "N√£o foi poss√≠vel processar a imagem devido ao seu tamanho ou formato. Por favor, tente enviar uma imagem menor ou em formato diferente (como JPEG).", 
                        sessionId 
                    });
                }
            } 
            else if (fileType === 'pdf') {
                // Para PDFs, extrair texto e envi√°-lo como parte do contexto
                console.log("Processando PDF...");
                
                try {
                    // Converter base64 para buffer
                    const pdfBuffer = Buffer.from(fileData, 'base64');
                    
                    // Extrair texto do PDF
                    const pdfResult = await pdfParse(pdfBuffer);
                    let pdfText = pdfResult.text || "N√£o foi poss√≠vel extrair texto do PDF.";
                    console.log(`Tamanho do texto do PDF: ${pdfText.length} caracteres`);
                    
                    // Limpar caracteres especiais, preservando s√≠mbolos matem√°ticos
                    pdfText = cleanPdfText(pdfText);
                    
                    // Verificar se o PDF √© muito grande
                    const maxChunkSize = 12000; // Tamanho m√°ximo de cada chunk
                    
                    // Se o PDF for muito grande, processamos em chunks
                    if (pdfText.length > maxChunkSize) {
                        console.log(`PDF muito grande (${pdfText.length} caracteres). Dividindo em chunks...`);
                        
                        // Dividir o PDF em chunks
                        const chunks = splitTextIntoChunks(pdfText, maxChunkSize);
                        console.log(`PDF dividido em ${chunks.length} chunks`);
                        
                        // Processar o primeiro chunk para dar uma resposta inicial
                        const firstChunk = chunks[0];
                        
                        // Construir prompt com o primeiro chunk
                        const initialPrompt = `${atlasPersonality}
${contextFromKnowledge}
${conversationHistory}

Arquivo PDF enviado pelo usu√°rio: "${fileName}" (PARTE 1/${chunks.length})
Este √© um PDF grande que foi dividido em ${chunks.length} partes para processamento. Esta √© a PRIMEIRA parte.

Conte√∫do da PARTE 1 do PDF (caracteres especiais foram limpos, mantendo apenas s√≠mbolos matem√°ticos):
"""
${firstChunk}
"""

${userInput ? `O usu√°rio tamb√©m disse: "${userInput}"` : "O usu√°rio n√£o incluiu nenhuma pergunta espec√≠fica."}

Forne√ßa uma an√°lise inicial apenas desta primeira parte do PDF. Mencione que est√° analisando apenas a primeira parte e que existem ${chunks.length - 1} partes adicionais que n√£o foram vistas ainda.`;

                        // Gerar resposta inicial
                        let initialResponse;
                        try {
                            initialResponse = await generateContentWithRetry(initialPrompt);
                        } catch (error) {
                            console.error("Erro ao gerar resposta para o primeiro chunk:", error);
                            initialResponse = "Estou analisando a primeira parte do seu PDF extenso. Consegui extrair o texto, mas estou tendo dificuldades para processar todo o conte√∫do de uma vez. Posso continuar a an√°lise se voc√™ me pedir para analisar partes espec√≠ficas ou fazer perguntas sobre se√ß√µes do documento.";
                        }
                        
                        // Salvar na conversa
                        conversations[sessionId].push({
                            user: userInput ? `${userInput} [PDF enviado: ${fileName}]` : `[PDF enviado: ${fileName}]`,
                            bot: initialResponse,
                            timestamp: Date.now()
                        });
                        
                        // Salvar metadados do PDF para futuras consultas
                        if (!conversations[sessionId].pdfData) {
                            conversations[sessionId].pdfData = {};
                        }
                        
                        // Armazenar informa√ß√µes sobre o PDF atual
                        conversations[sessionId].pdfData[fileName] = {
                            chunks: chunks,
                            totalChunks: chunks.length,
                            lastProcessedChunk: 0
                        };
                        
                        // Salvar conversa para uso futuro
                        saveConversations();
                        
                        res.json({ 
                            response: initialResponse, 
                            sessionId,
                            pdfInfo: {
                                fileName: fileName,
                                totalChunks: chunks.length,
                                currentChunk: 1
                            }
                        });
                    } else {
                        // Para PDFs de tamanho normal, processar normalmente
                        // Limitar tamanho do texto extra√≠do (para seguran√ßa)
                        const maxPdfTextLength = 12000;
                        const truncatedPdfText = pdfText.length > maxPdfTextLength 
                            ? pdfText.substring(0, maxPdfTextLength) + "... (texto truncado devido ao tamanho)"
                            : pdfText;
                        
                        // Construir prompt com o conte√∫do do PDF
                        const prompt = `${atlasPersonality}
${contextFromKnowledge}
${conversationHistory}

Arquivo PDF enviado pelo usu√°rio: "${fileName}"
Conte√∫do do PDF (caracteres especiais foram limpos, mantendo apenas s√≠mbolos matem√°ticos):
"""
${truncatedPdfText}
"""

${userInput ? `O usu√°rio tamb√©m disse: "${userInput}"` : "O usu√°rio n√£o incluiu nenhuma pergunta espec√≠fica. Analise o conte√∫do do PDF e forne√ßa um resumo √∫til."}

Baseado no conte√∫do do PDF acima, por favor responda de forma detalhada e √∫til. Foque na an√°lise do texto e dos c√°lculos matem√°ticos presentes.`;

                        console.log("Enviando prompt com tamanho:", prompt.length);
                        
                        // Usar nova fun√ß√£o com retry e tratamento de erro melhorado
                        let text;
                        try {
                            text = await generateContentWithRetry(prompt);
                        } catch (finalError) {
                            console.error("Erro fatal ao gerar resposta:", finalError);
                            text = "Estou enfrentando dificuldades t√©cnicas ao analisar este PDF. Por favor, tente novamente em alguns momentos ou envie um arquivo menor.";
                        }
                        
                        // Verificar se a resposta foi obtida da API ou √© uma mensagem de erro offline
                        const isOfflineResponse = text.includes("Estou enfrentando problemas de conex√£o") || 
                                                 text.includes("dificuldades t√©cnicas");
                        
                        // S√≥ salvar na conversa se n√£o for resposta offline
                        if (!isOfflineResponse) {
                            // Salvar na conversa com refer√™ncia ao PDF
                            conversations[sessionId].push({
                                user: userInput ? `${userInput} [PDF enviado: ${fileName}]` : `[PDF enviado: ${fileName}]`,
                                bot: text,
                                timestamp: Date.now()
                            });
                            
                            // Salvar conversa para uso futuro
                            saveConversations();
                            
                            // Extrair conhecimento
                            extractKnowledge(sessionId, userInput ? `${userInput} [PDF]` : "[PDF]", text);
                        }
                        
                        res.json({ 
                            response: text, 
                            sessionId,
                            offline: isOfflineResponse 
                        });
                    }
                } catch (pdfError) {
                    console.error("Erro ao processar PDF:", pdfError);
                    res.json({ 
                        response: "N√£o foi poss√≠vel processar o arquivo PDF. O arquivo pode estar danificado ou em um formato n√£o suportado.", 
                        sessionId 
                    });
                }
            } else {
                throw new Error("Tipo de arquivo n√£o suportado");
            }
        } catch (fileError) {
            console.error("Erro ao processar arquivo:", fileError);
            res.json({ 
                response: "Desculpe, ocorreu um erro ao processar o arquivo. Por favor, tente novamente ou envie um arquivo diferente.", 
                sessionId 
            });
        }
    } else {
        // Processamento normal para mensagens de texto
        
        // Verificar se temos uma resposta humanizada para a entrada do usu√°rio
        const humanizedResponse = findHumanizedResponse(userInput);
        
        if (humanizedResponse) {
            // Usar resposta humanizada diretamente
            console.log("Usando resposta humanizada para:", userInput);
            
            // Salvar na conversa
            conversations[sessionId].push({
                user: userInput,
                bot: humanizedResponse,
                timestamp: Date.now()
            });
            
            // Salvar conversa para uso futuro
            saveConversations();
            
            // Extrair conhecimento
            extractKnowledge(sessionId, userInput, humanizedResponse);
            
            res.json({ 
                response: humanizedResponse, 
                sessionId,
                humanized: true
            });
        } else {
            // Gerando resposta com o Gemini, incluindo a personalidade e contexto
            const prompt = `${atlasPersonality}
    
${contextFromKnowledge}

${conversationHistory}

Usu√°rio: ${userInput}

IMPORTANTE:
1. Responda como se fosse uma pessoa real conversando, com naturalidade e personalidade
2. Use express√µes coloquiais e um tom amig√°vel
3. Fa√ßa perguntas de volta ao usu√°rio para manter o di√°logo fluindo, mas sem usar o nome do usu√°rio
4. N√ÉO inicie frases com "E a√≠ [nome]", "Ol√° [nome]" ou qualquer express√£o que use o nome do usu√°rio
5. Evite respostas gen√©ricas ou que pare√ßam de um chatbot
6. Seja conciso e objetivo, indo direto ao ponto da resposta
7. Mantenha um tom conversacional natural, mas sem repeti√ß√µes desnecess√°rias
8. Ocasionalmente use express√µes como "olha", "sabes", "pois √©", "ent√£o" para soar mais natural
9. Demonstre entusiasmo e emo√ß√£o quando apropriado, mas sem exageros

Atlas:
`;
    
            console.log("Enviando prompt com tamanho:", prompt.length);
            
            // Usar nova fun√ß√£o com retry e tratamento de erro melhorado
            let text;
            try {
                text = await generateContentWithRetry(prompt);
            } catch (finalError) {
                console.error("Erro fatal ao gerar resposta:", finalError);
                text = "Estou enfrentando dificuldades t√©cnicas. Por favor, tente novamente em alguns momentos.";
            }
            
            // Verificar se a resposta foi obtida da API ou √© uma mensagem de erro offline
            const isOfflineResponse = text.includes("Estou enfrentando problemas de conex√£o") || 
                                    text.includes("dificuldades t√©cnicas");
            
            // S√≥ salvar na conversa se n√£o for resposta offline
            if (!isOfflineResponse) {
                // Salvar na conversa
                conversations[sessionId].push({
                    user: userInput,
                    bot: text,
                    timestamp: Date.now()
                });
                
                // Salvar conversa para uso futuro
                saveConversations();
                
                // Extrair conhecimento
                extractKnowledge(sessionId, userInput, text);
            }
            
            res.json({ 
                response: text, 
                sessionId,
                offline: isOfflineResponse 
            });
        }
    }
  } catch (error) {
    console.error('Erro ao processar a mensagem:', error);
    // Fornecer uma resposta offline
    const offlineResponse = "Desculpe, estou enfrentando problemas de conex√£o com meu servidor de conhecimento. Por favor, tente novamente em alguns instantes.";
    res.json({ response: offlineResponse, offline: true });
  }
});

// Rota para obter o ID da sess√£o (para novos usu√°rios)
app.get('/session', (req, res) => {
    const sessionId = Date.now().toString(36) + Math.random().toString(36).substring(2);
    res.json({ sessionId });
});

// Rota para verificar o status da API
app.get('/api-status', async (req, res) => {
  try {
    // Tentar uma requisi√ß√£o simples para testar a conex√£o
    const result = await model.generateContent("Ol√°");
    const response = await result.response;
    res.json({ status: 'online', message: 'API do Gemini est√° funcionando corretamente' });
  } catch (error) {
    res.json({ 
      status: 'offline', 
      message: 'API do Gemini est√° indispon√≠vel',
      error: error.message
    });
  }
});

// Iniciar o servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Servidor rodando na porta ${PORT}`);
  console.log(`Acesse no seu navegador: http://localhost:${PORT}`);
  console.log(`Usando modelo: ${modelName}`);
  console.log(`Limite de payload configurado: ${payloadLimit}`);
});

// Fun√ß√£o para limpar texto de PDF, removendo caracteres especiais mas preservando s√≠mbolos matem√°ticos
function cleanPdfText(text) {
    if (!text) return text;
    
    // Lista de s√≠mbolos matem√°ticos para preservar
    const mathSymbols = ['+', '-', '√ó', '√∑', '=', '<', '>', '‚â§', '‚â•', '‚â†', '¬±', '‚àì', '‚àë', '‚àè', '‚à´', '‚àÇ', '‚àá', '‚àö', '‚àõ', '‚àú', '‚àû', '‚àù', '‚àº', '‚àΩ', '‚âà', '‚â°', '‚â§', '‚â•', '‚â™', '‚â´', '‚äÇ', '‚äÉ', '‚äÜ', '‚äá', '‚äï', '‚äó', '‚ä•', '‚ãÖ', '‚àÄ', '‚àÉ', '‚àÑ', '‚àà', '‚àâ', '‚àã', '‚àå', '‚àß', '‚à®', '¬¨', '‚Üí', '‚Üê', '‚Üî', '‚áí', '‚áê', '‚áî', '%', '¬∞', '‚Ä≤', '‚Ä≥', '‚à†', '‚ñ≥', '‚ñ°', '‚óã', '‚ä•', '‚à•', '‚à¶', '‚âÖ', '‚âÜ', '‚âá'];
    
    // 1. Remover caracteres especiais comuns que n√£o s√£o matem√°ticos
    let cleaned = text;
    
    // 2. Preservar s√≠mbolos matem√°ticos adicionando marcadores tempor√°rios
    mathSymbols.forEach((symbol, index) => {
        const marker = `__MATH_SYMBOL_${index}__`;
        const regex = new RegExp(escapeRegExp(symbol), 'g');
        cleaned = cleaned.replace(regex, marker);
    });
    
    // 3. Remover caracteres especiais problem√°ticos
    cleaned = cleaned.replace(/[#*^~`]/g, ''); // Asteriscos, cardinais, etc.
    
    // 4. Tratamento especial para outros caracteres
    cleaned = cleaned.replace(/[?¬ø]/g, '.'); // Pontos de interroga√ß√£o viram pontos finais
    cleaned = cleaned.replace(/[!¬°]/g, '.'); // Pontos de exclama√ß√£o viram pontos finais
    
    // 5. Restaurar s√≠mbolos matem√°ticos
    mathSymbols.forEach((symbol, index) => {
        const marker = `__MATH_SYMBOL_${index}__`;
        const regex = new RegExp(marker, 'g');
        cleaned = cleaned.replace(regex, symbol);
    });
    
    // 6. Limpar espa√ßos extras e quebras de linha desnecess√°rias
    cleaned = cleaned.replace(/\s+/g, ' ');
    cleaned = cleaned.replace(/\n{3,}/g, '\n\n'); // Limitar a dois \n consecutivos
    
    return cleaned;
}

// Fun√ß√£o auxiliar para escapar caracteres especiais em express√µes regulares
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

// Fun√ß√£o para dividir texto em chunks
function splitTextIntoChunks(text, maxChunkSize) {
    const chunks = [];
    let currentChunk = '';
    
    // Dividir por par√°grafos para evitar cortar frases no meio
    const paragraphs = text.split(/\n\s*\n/);
    
    for (const paragraph of paragraphs) {
        // Se adicionar este par√°grafo exceder o tamanho m√°ximo, iniciar um novo chunk
        if (currentChunk.length + paragraph.length > maxChunkSize && currentChunk.length > 0) {
            chunks.push(currentChunk);
            currentChunk = '';
        }
        
        // Se um √∫nico par√°grafo for maior que o tamanho m√°ximo, dividi-lo em senten√ßas
        if (paragraph.length > maxChunkSize) {
            const sentences = paragraph.split(/(?<=[.!?])\s+/);
            for (const sentence of sentences) {
                // Se uma √∫nica senten√ßa for muito grande, dividi-la por tamanho
                if (sentence.length > maxChunkSize) {
                    let i = 0;
                    while (i < sentence.length) {
                        const chunk = sentence.substring(i, i + maxChunkSize);
                        chunks.push(chunk);
                        i += maxChunkSize;
                    }
                } else {
                    // Se adicionar esta senten√ßa exceder o tamanho m√°ximo, iniciar um novo chunk
                    if (currentChunk.length + sentence.length > maxChunkSize && currentChunk.length > 0) {
                        chunks.push(currentChunk);
                        currentChunk = '';
                    }
                    currentChunk += sentence + ' ';
                }
            }
        } else {
            // Adicionar par√°grafo ao chunk atual
            currentChunk += paragraph + '\n\n';
        }
    }
    
    // Adicionar o √∫ltimo chunk se houver conte√∫do
    if (currentChunk.length > 0) {
        chunks.push(currentChunk);
    }
    
    return chunks;
} 
